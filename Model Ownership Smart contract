// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ModelOwnership {

    address public owner;
    address private previousOwner;
    address public recoveryAddress;

    string public modelName;
    string public modelDescription;
    string private verificationPassword;

    bool public isLocked;

    address private pendingOwner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event OwnershipTransferRequested(address indexed currentOwner, address indexed pendingOwner);
    event ModelNameUpdated(string oldName, string newName);
    event ModelDescriptionUpdated(string oldDescription, string newDescription);
    event OwnershipRenounced(address indexed previousOwner);
    event ModelReset();
    event ModelLocked();
    event ModelUnlocked();
    event PasswordUpdated();
    event RecoveryAddressUpdated(address indexed oldRecovery, address indexed newRecovery);

    struct ModelHistory {
        string oldName;
        string oldDescription;
        uint256 timestamp;
    }

    ModelHistory[] public modelHistory;

    constructor(string memory _modelName, string memory _modelDescription) {
        owner = msg.sender;
        modelName = _modelName;
        modelDescription = _modelDescription;
        verificationPassword = "default"; // Can be updated later
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action.");
        _;
    }

    modifier notLocked() {
        require(!isLocked, "Model is locked.");
        _;
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "New owner cannot be the zero address.");
        previousOwner = owner;
        owner = newOwner;
        emit OwnershipTransferred(previousOwner, newOwner);
    }

    function requestOwnershipTransfer(address _pendingOwner) public onlyOwner {
        require(_pendingOwner != address(0), "Pending owner cannot be zero address.");
        pendingOwner = _pendingOwner;
        emit OwnershipTransferRequested(owner, pendingOwner);
    }

    function approveOwnershipTransfer() public {
        require(msg.sender == pendingOwner, "Only the pending owner can accept ownership.");
        previousOwner = owner;
        owner = pendingOwner;
        pendingOwner = address(0);
        emit OwnershipTransferred(previousOwner, owner);
    }

    function updateModelName(string memory newName) public onlyOwner notLocked {
        modelHistory.push(ModelHistory(modelName, modelDescription, block.timestamp));
        string memory oldName = modelName;
        modelName = newName;
        emit ModelNameUpdated(oldName, newName);
    }

    function updateModelDescription(string memory newDescription) public onlyOwner notLocked {
        modelHistory.push(ModelHistory(modelName, modelDescription, block.timestamp));
        string memory oldDescription = modelDescription;
        modelDescription = newDescription;
        emit ModelDescriptionUpdated(oldDescription, newDescription);
    }

    function renounceOwnership() public onlyOwner {
        previousOwner = owner;
        owner = address(0);
        emit OwnershipRenounced(previousOwner);
    }

    function isOwner(address addr) public view returns (bool) {
        return addr == owner;
    }

    function getOwnershipDetails() public view returns (address, string memory, string memory) {
        return (owner, modelName, modelDescription);
    }

    function restoreOwnership() public {
        require(msg.sender == previousOwner || msg.sender == recoveryAddress, "Only previous or recovery address can restore ownership.");
        require(owner == address(0), "Ownership is still active.");
        owner = previousOwner;
        emit OwnershipTransferred(address(0), owner);
    }

    function changeOwnerWithVerification(address newOwner, string memory password) public onlyOwner {
        require(keccak256(abi.encodePacked(password)) == keccak256(abi.encodePacked(verificationPassword)), "Invalid password.");
        previousOwner = owner;
        owner = newOwner;
        emit OwnershipTransferred(previousOwner, newOwner);
    }

    function updateVerificationPassword(string memory newPassword) public onlyOwner {
        verificationPassword = newPassword;
        emit PasswordUpdated();
    }

    function resetModelDetails() public onlyOwner {
        modelHistory.push(ModelHistory(modelName, modelDescription, block.timestamp));
        modelName = "";
        modelDescription = "";
        emit ModelReset();
    }

    function isModelInfoEmpty() public view returns (bool) {
        return (bytes(modelName).length == 0 && bytes(modelDescription).length == 0);
    }

    function getModelSummary() public view returns (string memory) {
        return string(abi.encodePacked("Model Name: ", modelName, " | Description: ", modelDescription));
    }

    function lockModel() public onlyOwner {
        isLocked = true;
        emit ModelLocked();
    }

    function unlockModel() public onlyOwner {
        isLocked = false;
        emit ModelUnlocked();
    }

    function getModelHistory(uint index) public view returns (string memory, string memory, uint256) {
        require(index < modelHistory.length, "Invalid history index.");
        ModelHistory memory history = modelHistory[index];
        return (history.oldName, history.oldDescription, history.timestamp);
    }

    function setRecoveryAddress(address newRecovery) public onlyOwner {
        emit RecoveryAddressUpdated(recoveryAddress, newRecovery);
        recoveryAddress = newRecovery;
    }

    function getModelHistoryLength() public view returns (uint) {
        return modelHistory.length;
    }
}
