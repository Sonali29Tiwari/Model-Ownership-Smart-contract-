// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract ModelOwnership {

    address public owner;
    string public modelName;
    string public modelDescription;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event ModelNameUpdated(string oldName, string newName);
    event ModelDescriptionUpdated(string oldDescription, string newDescription);
    event OwnershipRenounced(address indexed previousOwner);

    constructor(string memory _modelName, string memory _modelDescription) {
        owner = msg.sender;
        modelName = _modelName;
        modelDescription = _modelDescription;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action.");
        _;
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "New owner cannot be the zero address.");
        address previousOwner = owner;
        owner = newOwner;
        emit OwnershipTransferred(previousOwner, newOwner);
    }

    function updateModelName(string memory newName) public onlyOwner {
        string memory oldName = modelName;
        modelName = newName;
        emit ModelNameUpdated(oldName, newName);
    }

    function updateModelDescription(string memory newDescription) public onlyOwner {
        string memory oldDescription = modelDescription;
        modelDescription = newDescription;
        emit ModelDescriptionUpdated(oldDescription, newDescription);
    }

    function renounceOwnership() public onlyOwner {
        address previousOwner = owner;
        owner = address(0);
        emit OwnershipRenounced(previousOwner);
    }

    function isOwner(address addr) public view returns (bool) {
        return addr == owner;
    }

    function getOwnershipDetails() public view returns (address, string memory, string memory) {
        return (owner, modelName, modelDescription);
    }
}
